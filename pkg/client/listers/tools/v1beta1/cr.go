/*
Copyright 2021 The 51talk EFF.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/ysicing/cr/apis/tools/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CRLister helps list CRs.
// All objects returned here must be treated as read-only.
type CRLister interface {
	// List lists all CRs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.CR, err error)
	// CRs returns an object that can list and get CRs.
	CRs(namespace string) CRNamespaceLister
	CRListerExpansion
}

// cRLister implements the CRLister interface.
type cRLister struct {
	indexer cache.Indexer
}

// NewCRLister returns a new CRLister.
func NewCRLister(indexer cache.Indexer) CRLister {
	return &cRLister{indexer: indexer}
}

// List lists all CRs in the indexer.
func (s *cRLister) List(selector labels.Selector) (ret []*v1beta1.CR, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.CR))
	})
	return ret, err
}

// CRs returns an object that can list and get CRs.
func (s *cRLister) CRs(namespace string) CRNamespaceLister {
	return cRNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CRNamespaceLister helps list and get CRs.
// All objects returned here must be treated as read-only.
type CRNamespaceLister interface {
	// List lists all CRs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.CR, err error)
	// Get retrieves the CR from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.CR, error)
	CRNamespaceListerExpansion
}

// cRNamespaceLister implements the CRNamespaceLister
// interface.
type cRNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CRs in the indexer for a given namespace.
func (s cRNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.CR, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.CR))
	})
	return ret, err
}

// Get retrieves the CR from the indexer for a given namespace and name.
func (s cRNamespaceLister) Get(name string) (*v1beta1.CR, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("cr"), name)
	}
	return obj.(*v1beta1.CR), nil
}
